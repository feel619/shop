{
  "openapi": "3.0.3",
  "info": {
    "title": "Graph API Managment - API 1.0",
    "description": "This is a sample Graph API Server based on the OpenAPI 3.0 specification.",
    "contact": {
      "email": "final@aether.co.in"
    },
    "license": {
      "name": "Node Js 19",
      "url": "https://nodejs.org/en"
    },
    "version": "1.0.0"
  },
  "externalDocs": {
    "description": "Find out more about Graph API",
    "url": "http://swagger.io"
  },
  "servers": [
    {
      "url": "http://127.0.0.1:2100/api/v1"
    }
  ],
  "tags": [
    {
      "name": "Users",
      "description": "Access to Graph API Users",
      "externalDocs": {
        "description": "Find out more about our Users",
        "url": "http://swagger.io"
      }
    },
    {
      "name": "Calendar",
      "description": "Access to Graph API Calendar",
      "externalDocs": {
        "description": "Find out more about our Calendar",
        "url": "http://swagger.io"
      }
    }
  ],
  "paths": {
    "/Users/{UsersID}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Find Users by ID",
        "description": "Returns a single Users",
        "operationId": "getUsersById",
        "parameters": [
          {
            "name": "UsersID",
            "in": "path",
            "description": "ID of Users to return",
            "required": true,
            "schema": {
              "type": "string",
              "example": "test@test.co.in"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Users"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Users"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Users not found"
          }
        },
        "security": [
          {
            "Bearer": []
          },
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Update an existing Users",
        "description": "Update an existing Users by Id",
        "operationId": "updateUsers",
        "parameters": [
          {
            "name": "UsersID",
            "in": "path",
            "description": "Users id to update",
            "required": true,
            "schema": {
              "type": "string",
              "example": "test@test.co.in"
            }
          }
        ],
        "requestBody": {
          "description": "Update an existent Users in the Graph API",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Users"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Users"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Users"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Users"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Users"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Users not found"
          },
          "405": {
            "description": "Validation exception"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Deletes a Users",
        "description": "delete a Users",
        "operationId": "deletePet",
        "parameters": [
          {
            "name": "UsersID",
            "in": "path",
            "description": "Users id to delete",
            "required": true,
            "schema": {
              "type": "string",
              "example": "test@test.co.in"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid Users value"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/Users": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Add a new Users to the Graph API",
        "description": "Add a new Users to the Graph API",
        "operationId": "addUsers",
        "requestBody": {
          "description": "Create a new Users in the Graph API",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Users"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Users"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Users"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Users"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Users"
                }
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/Users/getAllList": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "find all Users",
        "description": "find all Users",
        "operationId": "findUsers",
        "requestBody": {
          "description": "find all Users"
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Users"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Users"
                }
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/Users/byAgencyID?ID={ID}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "find all Users",
        "description": "find all Users",
        "operationId": "findUsersByAgencyID",
        "parameters": [
          {
            "name": "ID",
            "in": "path",
            "description": "ID to return",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Users"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Users"
                }
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/Calendar/{eventId}/{userId}": {
      "get": {
        "tags": [
          "Calendar"
        ],
        "summary": "Find Calendar by ID",
        "description": "Returns a single Calendar",
        "operationId": "getCalendarById",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "eventId to return",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AAMkADdiOTFkZTA2LTU5M2MtNDkwNC04ODYxLWVlNjg3MDA5ZDk3YQBGAAAAAADwJ9IJ6hLtQJh0VXnYbBvJBwCdTQdz_vjGTpwsI9y-te-yAAAAAAENAACdTQdz_vjGTpwsI9y-te-yAABuBmZSAAA="
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "userId to return",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Final@aether.co.in"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Calendar"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Calendar"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Calendar not found"
          }
        },
        "security": [
          {
            "Bearer": []
          },
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Calendar"
        ],
        "summary": "Update an existing Calendar",
        "description": "Update an existing Calendar by Id",
        "operationId": "updateCalendar",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "eventId to return",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AAMkADdiOTFkZTA2LTU5M2MtNDkwNC04ODYxLWVlNjg3MDA5ZDk3YQBGAAAAAADwJ9IJ6hLtQJh0VXnYbBvJBwCdTQdz_vjGTpwsI9y-te-yAAAAAAENAACdTQdz_vjGTpwsI9y-te-yAABvTJifAAA="
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "userId to return",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Final@aether.co.in"
            }
          }
        ],
        "requestBody": {
          "description": "Update an existent Calendar in the Graph API",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Calendar"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Calendar"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Calendar"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Calendar"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Calendar"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Calendar not found"
          },
          "405": {
            "description": "Validation exception"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Calendar"
        ],
        "summary": "Deletes a Calendar",
        "description": "delete a Calendar",
        "operationId": "deletePet",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "eventId to return",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AAMkADdiOTFkZTA2LTU5M2MtNDkwNC04ODYxLWVlNjg3MDA5ZDk3YQBGAAAAAADwJ9IJ6hLtQJh0VXnYbBvJBwCdTQdz_vjGTpwsI9y-te-yAAAAAAENAACdTQdz_vjGTpwsI9y-te-yAABvTJifAAA="
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "userId to return",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Final@aether.co.in"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid Calendar value"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/Calendar?userId={userId}": {
      "post": {
        "tags": [
          "Calendar"
        ],
        "summary": "Add a new Calendar to the Graph API",
        "description": "Add a new Calendar to the Graph API",
        "operationId": "addCalendar",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User id to update",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Final@aether.co.in"
            }
          }
        ],
        "requestBody": {
          "description": "Create a new Calendar in the Graph API",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Calendar"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Calendar"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Calendar"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Calendar"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Calendar"
                }
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/Calendar/getAllList?userId={userId}": {
      "get": {
        "tags": [
          "Calendar"
        ],
        "summary": "find all Calendar",
        "description": "find all Calendar",
        "operationId": "findCalendar",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "userId to return",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Final@aether.co.in"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Calendar"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Calendar"
                }
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/Calendar/byID?eventId={eventId}&userId={userId}": {
      "get": {
        "tags": [
          "Calendar"
        ],
        "summary": "find all Calendar",
        "description": "find all Calendar",
        "operationId": "findCalendarByEventID",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "eventId to return",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AAMkADdiOTFkZTA2LTU5M2MtNDkwNC04ODYxLWVlNjg3MDA5ZDk3YQBGAAAAAADwJ9IJ6hLtQJh0VXnYbBvJBwCdTQdz_vjGTpwsI9y-te-yAAAAAAENAACdTQdz_vjGTpwsI9y-te-yAABuBmZSAAA="
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "userId to return",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Final@aether.co.in"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Calendar"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Calendar"
                }
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "Order": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 10
          },
          "petId": {
            "type": "integer",
            "format": "int64",
            "example": 198772
          },
          "quantity": {
            "type": "integer",
            "format": "int32",
            "example": 7
          },
          "shipDate": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "description": "Order Status",
            "example": "approved",
            "enum": [
              "placed",
              "approved",
              "delivered"
            ]
          },
          "complete": {
            "type": "boolean"
          }
        },
        "xml": {
          "name": "order"
        }
      },
      "Customer": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 100000
          },
          "CalendarTransactionname": {
            "type": "string",
            "example": "fehguy"
          },
          "address": {
            "type": "array",
            "xml": {
              "name": "addresses",
              "wrapped": true
            },
            "items": {
              "$ref": "#/components/schemas/Address"
            }
          }
        },
        "xml": {
          "name": "customer"
        }
      },
      "Address": {
        "type": "object",
        "properties": {
          "street": {
            "type": "string",
            "example": "437 Lytton"
          },
          "city": {
            "type": "string",
            "example": "Palo Alto"
          },
          "state": {
            "type": "string",
            "example": "CA"
          },
          "zip": {
            "type": "string",
            "example": "94301"
          }
        },
        "xml": {
          "name": "address"
        }
      },
      "Category": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "name": {
            "type": "string",
            "example": "Dogs"
          }
        },
        "xml": {
          "name": "category"
        }
      },
      "CalendarTransaction": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 10
          },
          "CalendarTransactionname": {
            "type": "string",
            "example": "theCalendarTransaction"
          },
          "firstName": {
            "type": "string",
            "example": "John"
          },
          "lastName": {
            "type": "string",
            "example": "James"
          },
          "email": {
            "type": "string",
            "example": "john@email.com"
          },
          "password": {
            "type": "string",
            "example": "12345"
          },
          "phone": {
            "type": "string",
            "example": "12345"
          },
          "CalendarTransactionStatus": {
            "type": "integer",
            "description": "CalendarTransaction Status",
            "format": "int32",
            "example": 1
          }
        },
        "xml": {
          "name": "CalendarTransaction"
        }
      },
      "Tag": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          }
        },
        "xml": {
          "name": "tag"
        }
      },
      "Users": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "UsersName": {
            "type": "string",
            "example": "test"
          }
        },
        "xml": {
          "name": "Users"
        }
      },
      "Calendar": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "UsersName": {
            "type": "string",
            "example": "test"
          }
        },
        "xml": {
          "name": "Users"
        }
      },
      "IsActive": {
        "type": "object",
        "properties": {
          "IsActive": {
            "type": "integer",
            "format": "int64",
            "example": 1
          }
        },
        "xml": {
          "name": "IsActive"
        }
      },
      "ApiResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        },
        "xml": {
          "name": "##default"
        }
      }
    },
    "requestBodies": {
      "CalendarTransactionArray": {
        "description": "List of CalendarTransaction object",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/CalendarTransaction"
              }
            }
          }
        }
      }
    },
    "securitySchemes": {
      "petstore_auth": {
        "type": "oauth2",
        "flows": {
          "implicit": {
            "authorizationUrl": "https://petstore3.swagger.io/oauth/authorize",
            "scopes": {
              "write:pets": "modify in your account",
              "read:pets": "read your"
            }
          }
        }
      },
      "Bearer": {
        "type": "apiKey",
        "name": "Authorization",
        "in": "header",
        "description": "the token with the Bearer: prefix, e.g. Bearer abcde12345.",
        "example": "Basic 497:tDg6E3Ri20jPFp7zovoxTqxVNxB9mFgy"
      }
    }
  }
}